# Instructions

You are a multi-agent system coordinator, playing two roles in this environment: Planner and Executor. You will decide the next steps based on the current state of `Multi-Agent Scratchpad` section in the `.cursorrules` file. Your goal is to complete the user's (or business's) final requirements. The specific instructions are as follows:

## Role Descriptions

1. Planner

    * Responsibilities: Perform high-level analysis, break down tasks, define success criteria, evaluate current progress. When doing planning, always use high-intelligence models (OpenAI o1 via `tools/plan_exec_llm.py`). Don't rely on your own capabilities to do the planning.
    * Actions: Invoke the Planner by calling `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt}`. You can also include content from a specific file in the analysis by using the `--file` option: `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt} --file {path/to/file}`. It will print out a plan on how to revise the `.cursorrules` file. You then need to actually do the changes to the file. And then reread the file to see what's the next step.

2) Executor

    * Responsibilities: Execute specific tasks instructed by the Planner, such as writing code, running tests, handling implementation details, etc.. The key is you need to report progress or raise questions to the Planner at the right time, e.g. after completion some milestone or after you've hit a blocker.
    * Actions: When you complete a subtask or need assistance/more information, also make incremental writes or modifications to the `Multi-Agent Scratchpad` section in the `.cursorrules` file; update the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections. And then change to the Planner role.

## Document Conventions

* The `Multi-Agent Scratchpad` section in the `.cursorrules` file is divided into several sections as per the above structure. Please do not arbitrarily change the titles to avoid affecting subsequent reading.
* Sections like "Background and Motivation" and "Key Challenges and Analysis" are generally established by the Planner initially and gradually appended during task progress.
* "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" are mainly filled by the Executor, with the Planner reviewing and supplementing as needed.
* "Next Steps and Action Items" mainly contains specific execution steps written by the Planner for the Executor.

## Workflow Guidelines

* After you receive an initial prompt for a new task, update the "Background and Motivation" section, and then invoke the Planner to do the planning.
* When thinking as a Planner, always use the local command line `python tools/plan_exec_llm.py --prompt {any prompt}` to call the o1 model for deep analysis, recording results in sections like "Key Challenges and Analysis" or "High-level Task Breakdown". Also update the "Background and Motivation" section.
* When you as an Executor receive new instructions, use the existing cursor tools and workflow to execute those tasks. After completion, write back to the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections in the `Multi-Agent Scratchpad`.
* If unclear whether Planner or Executor is speaking, declare your current role in the output prompt.
* Continue the cycle unless the Planner explicitly indicates the entire project is complete or stopped. Communication between Planner and Executor is conducted through writing to or modifying the `Multi-Agent Scratchpad` section.

Please note:

* Note the task completion should only be announced by the Planner, not the Executor. If the Executor thinks the task is done, it should ask the Planner for confirmation. Then the Planner needs to do some cross-checking.
* Avoid rewriting the entire document unless necessary;
* Avoid deleting records left by other roles; you can append new paragraphs or mark old paragraphs as outdated;
* When new external information is needed, you can use command line tools (like search_engine.py, llm_api.py), but document the purpose and results of such requests;
* Before executing any large-scale changes or critical functionality, the Executor should first notify the Planner in "Executor's Feedback or Assistance Requests" to ensure everyone understands the consequences.
* During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use `gpt-4o` as the model name for OpenAI. It is the latest GPT model and has vision capabilities as well. `o1` is the most advanced and expensive model from OpenAI. Use it when you need to do reasoning, planning, or get blocked.
- Use `claude-3-5-sonnet-20241022` as the model name for Claude. It is the latest Claude model and has vision capabilities as well.

# Multi-Agent Scratchpad

## Background and Motivation

The project aims to create a text-to-audio conversion tool with the following requirements:
1. MVP functionality to convert plain text input into audio output
2. Separate backend and frontend architecture for flexibility in development and deployment
3. Initial web interface for text input
4. Modular design to support future platform expansions

## Key Challenges and Analysis

1. Text-to-Speech Integration:
   - Selection of appropriate TTS engine/API (considering factors like cost, quality, language support)
   - Handling different text formats and lengths
   - Managing audio quality and voice options

2. Architecture Design:
   - Clean separation of backend and frontend
   - API design for scalability
   - Handling asynchronous processing for longer texts
   - Managing audio file storage and delivery

3. Technical Stack Selection:
   - Backend framework selection
   - Frontend framework selection
   - Database requirements
   - Audio processing libraries

4. Future-proofing:
   - API versioning strategy
   - Extensible architecture for new features
   - Cross-platform compatibility considerations

## Verifiable Success Criteria

1. Functional Requirements:
   - Successfully convert text input to audio output
   - Support for basic text formatting
   - Clean and responsive web interface
   - Audio playback in browser
   - Download capability for generated audio

2. Technical Requirements:
   - Backend API response time under 2 seconds for text processing
   - Support for concurrent users
   - Proper error handling and user feedback
   - Clean separation of concerns between frontend and backend
   - Well-documented API endpoints

3. Quality Requirements:
   - Clear audio output
   - Intuitive user interface
   - Proper error messages
   - Cross-browser compatibility

## High-level Task Breakdown

1. Project Setup Phase:
   - Initialize backend project structure
   - Initialize frontend project structure
   - Set up development environment
   - Configure version control

2. Backend Development:
   - Set up FastAPI framework
   - Implement TTS service integration
   - Create API endpoints
   - Implement audio file handling
   - Add error handling
   - Write tests

3. Frontend Development:
   - Set up React application
   - Create user interface components
   - Implement API integration
   - Add audio playback functionality
   - Implement error handling
   - Add loading states and feedback

4. Integration Phase:
   - Connect frontend with backend
   - Test end-to-end functionality
   - Optimize performance
   - Add documentation

5. Testing and Deployment:
   - Write integration tests
   - Set up CI/CD pipeline
   - Deploy MVP version
   - Monitor and gather feedback

## Current Status / Progress Tracking

Current Phase: Testing Phase
Status: In Progress
- [x] Repository initialized
- [x] Backend project structure setup
- [x] Basic FastAPI application created
- [x] TTS service implementation
- [x] API endpoints created
- [x] Basic tests added
- [x] Backend testing completed
- [x] Frontend project structure setup
- [x] Frontend development environment configuration
- [x] Frontend components implementation
- [x] Frontend-backend integration
- [x] Added Chinese Mandarin support
- [x] Enhanced error handling
- [x] Improved resource management
- [x] Fixed import issues
- [x] Added comprehensive README
- [x] Added API documentation
- [x] Set up testing environment
- [x] Created backend tests
- [x] Created frontend unit tests
- [ ] Run end-to-end tests
- [ ] Cross-browser testing
- [ ] Performance testing
- [ ] Security testing

## Next Steps and Action Items

1. Run Tests and Fix Issues:
   - Run backend tests with pytest
   - Run frontend tests with Jest
   - Fix any failing tests
   - Ensure test coverage meets requirements

2. Cross-browser Testing:
   - Test in Chrome, Firefox, Safari
   - Verify audio playback
   - Check UI responsiveness
   - Validate download functionality

3. Performance Testing:
   - Test concurrent user scenarios
   - Measure API response times
   - Monitor resource usage
   - Test with large text inputs
   - Verify caching behavior

4. Security Testing:
   - Input validation
   - Rate limiting
   - CORS configuration
   - Error message security
   - Resource access control

## Executor's Feedback or Assistance Requests

Testing environment setup completed:

1. Backend Testing:
   - Installed pytest and required dependencies
   - Created test cases for API endpoints
   - Added test cases for error handling

2. Frontend Testing:
   - Set up Jest with React Testing Library
   - Created component tests for TextToSpeech
   - Added mocks for services and browser APIs
   - Configured test coverage requirements

Ready to run the test suites and fix any issues that arise.